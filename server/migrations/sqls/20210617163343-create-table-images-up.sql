/* Replace with your SQL commands */
-- CAMERA IMAGES
CREATE TABLE IF NOT EXISTS images.camera_json(
    id BIGSERIAL,
    json json NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_camera_json_id 
    ON images.camera_json (id);

COMMENT ON TABLE images.camera_json IS 'Table stores the camera json payload';
COMMENT ON COLUMN images.camera_json.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.camera_json.json IS '@omit create,update
contains the json data for camera payload';

CREATE TABLE IF NOT EXISTS images.camera_message_header (
    id BIGSERIAL,
    header_id BIGINT NOT NULL,
    readingAt TIMESTAMPTZ NOT NULL,
    seq DECIMAL NOT NULL,
    node VARCHAR(255) NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_camera_message_header_id 
    ON images.camera_message_header (id);
CREATE INDEX idx_camera_message_header_header_id 
    ON images.camera_message_header (header_id);

COMMENT ON TABLE images.camera_message_header IS 'Table stores the camera message descriptor';
COMMENT ON COLUMN images.camera_message_header.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.camera_message_header.header_id IS '@omit create,update
descriptor id for message passed from vehicle';
COMMENT ON COLUMN images.camera_message_header.readingAt IS '@omit create,update
timestamp for message passed from vehicle';
COMMENT ON COLUMN images.camera_message_header.seq IS '@omit create,update
seq for message passed from vehicle';
COMMENT ON COLUMN images.camera_message_header.node IS '@omit create,update
node for message passed from vehicle';

CREATE TABLE IF NOT EXISTS images.image_data (
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_image_data_id
    ON images.image_data(id);
CREATE INDEX idx_image_data_data
    ON images.image_data(data);

COMMENT ON TABLE images.image_data IS 'Table image data from camera';
COMMENT ON COLUMN images.image_data.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.image_data.data IS '@omit create,update
image data';

CREATE TABLE IF NOT EXISTS images.image_header_stamp (
    id BIGSERIAL,
    sec INT NOT NULL,
    nanosec INT NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_image_header_stamp_id
    ON images.image_header_stamp (id);

COMMENT ON TABLE images.image_header_stamp IS 'Table image header stamp from camera';
COMMENT ON COLUMN images.image_header_stamp.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.image_header_stamp.sec IS '@omit create,update
image time in sec';
COMMENT ON COLUMN images.image_header_stamp.nanosec IS '@omit create,update
image time in nanosec';

CREATE TABLE IF NOT EXISTS images.image_header (
    id BIGSERIAL,
    stamp_id BIGINT NOT NULL,
    frame_id VARCHAR(255) NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_image_header_stamp
	    FOREIGN KEY (stamp_id)
	    REFERENCES images.image_header_stamp (id);
);

CREATE INDEX idx_image_headers_id
    ON images.image_header (id);
CREATE INDEX idx_image_headers_stamp_id
    ON images.image_header (stamp_id);
CREATE INDEX idx_image_headers_frame_id
    ON images.image_header (frame_id);

COMMENT ON TABLE images.image_header IS 'Table image descriptor from camera';
COMMENT ON COLUMN images.image_header.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.image_header.stamp_id IS '@omit create,update
stamp_id of image';
COMMENT ON COLUMN images.image_header.frame_id IS '@omit create,update
frame_id of image';


CREATE TABLE IF NOT EXISTS images.images (
    id BIGSERIAL,
    header_id BIGINT NOT NULL,
    height INT NOT NULL,
    width INT NOT NULL,
    encoding VARCHAR(255) NOT NULL,
    is_bigendian INT NOT NULL,
    step BIGINT NOT NULL,
    data_id BIGINT NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_image_header
        FOREIGN KEY(header_id)
        REFERENCES images.image_header (id),
    CONSTRAINT fk_image_data
        FOREIGN KEY(data_id)
        REFERENCES images.image_data(id)
);

CREATE INDEX idx_images_id 
    ON images.images (id);
CREATE INDEX idx_images_header_id 
    ON images.images (header_id);

COMMENT ON TABLE images.images IS 'Table image from camera';
COMMENT ON COLUMN images.images.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.images.header_id IS '@omit create,update
header_id of image';
COMMENT ON COLUMN images.images.height IS '@omit create,update
height of image';
COMMENT ON COLUMN images.images.width IS '@omit create,update
width of image';
COMMENT ON COLUMN images.images.encoding IS '@omit create,update
encoding of image';
COMMENT ON COLUMN images.images.is_bigendian IS '@omit create,update
is_bigendian image';
COMMENT ON COLUMN images.images.step IS '@omit create,update
number of steps in image';
COMMENT ON COLUMN images.images.data_id IS '@omit create,update
data of image';

CREATE TABLE IF NOT EXISTS images.side_intrinsics_k (
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_side_intrinsics_k_id 
    ON images.side_intrinsics_k (id);

COMMENT ON TABLE images.side_intrinsics_k IS 'Table side intrinsics k from camera';
COMMENT ON COLUMN images.side_intrinsics_k.id IS '@omit create,update
Id generated by database, auto incremented';

CREATE TABLE IF NOT EXISTS images.side_intrinsics_d (
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_side_intrinsics_d_id 
    ON images.side_intrinsics_d (id);

COMMENT ON TABLE images.side_intrinsics_d IS 'Table side intrinsics d from camera';
COMMENT ON COLUMN images.side_intrinsics_d.id IS '@omit create,update
Id generated by database, auto incremented';

CREATE TABLE IF NOT EXISTS images.side_intrinsics (
    id BIGSERIAL,
    height INT NOT NULL,
    width INT NOT NULL,
    k_id BIGINT NOT NULL,
    d_id BIGINT NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_side_intrinsics_k
        FOREIGN KEY(k_id)
        REFERENCES images.side_intrinsics_k(id),
    CONSTRAINT fk_side_intrinsics_d
        FOREIGN KEY(d_id)
        REFERENCES images.side_intrinsics_d(id)
);

CREATE INDEX idx_sides_intrinsics_id 
    ON images.side_intrinsics (id);
CREATE INDEX idx_sides_intrinsics_k_id 
    ON images.side_intrinsics (k_id);
CREATE INDEX idx_sides_intrinsics_d_id 
    ON images.side_intrinsics (d_id);

COMMENT ON TABLE images.side_intrinsics IS 'Table side intrinsics from camera';
COMMENT ON COLUMN images.side_intrinsics.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.side_intrinsics.height IS '@omit create,update
height of side intrinsics';
COMMENT ON COLUMN images.side_intrinsics.width IS '@omit create,update
width of side intrinsics';
COMMENT ON COLUMN images.side_intrinsics.k_id IS '@omit create,update
k id of side intrinsics';
COMMENT ON COLUMN images.side_intrinsics.d_id IS '@omit create,update
d id id of side intrinsics';

CREATE TABLE IF NOT EXISTS images.stereo_extrinsics_t(
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_stereo_extrinsics_t_id 
    ON images.stereo_extrinsics_t (id);

COMMENT ON TABLE images.stereo_extrinsics_t IS 'Table stereo extrinsics t from camera';
COMMENT ON COLUMN images.stereo_extrinsics_t.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.stereo_extrinsics_t.data IS '@omit create,update
data of stereo extrinsics t';

CREATE TABLE IF NOT EXISTS images.stereo_extrinsics_r(
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_stereo_extrinsics_r_id 
    ON images.stereo_extrinsics_r (id);

COMMENT ON TABLE images.stereo_extrinsics_r IS 'Table stereo extrinsics r from camera';
COMMENT ON COLUMN images.stereo_extrinsics_r.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.stereo_extrinsics_t.data IS '@omit create,update
data of stereo extrinsics r';

CREATE TABLE IF NOT EXISTS images.stereo_extrinsics_r_rodrigues(
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_stereo_extrinsics_r_rodrigues_id 
    ON images.stereo_extrinsics_r_rodrigues (id);

COMMENT ON TABLE images.stereo_extrinsics_r_rodrigues IS 'Table stereo extrinsics r_rodrigues from camera';
COMMENT ON COLUMN images.stereo_extrinsics_r_rodrigues.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.stereo_extrinsics_r_rodrigues.data IS '@omit create,update
data of stereo extrinsics r_rodrigues'


CREATE TABLE IF NOT EXISTS images.stereo_extrinsics (
    id BIGSERIAL,
    t_id BIGINT NOT NULL,
    r_id BIGINT NOT NULL,
    r_rodrigues_id BIGINT NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_stereo_extrinsics_t
        FOREIGN KEY(t_id)
        REFERENCES images.stereo_extrinsics_t(id),
    CONSTRAINT fk_stereo_extrinsics_r
        FOREIGN KEY(r_id)
        REFERENCES images.stereo_extrinsics_r(id),
    CONSTRAINT fk_stereo_extrinsics_r_rodrigues
        FOREIGN KEY(r_rodrigues_id)
        REFERENCES images.stereo_extrinsics_r_rodrigues(id)
);

CREATE INDEX idx_stereos_extrinsics_id 
    ON images.stereo_extrinsics (id);
CREATE INDEX idx_stereos_extrinsics_t_id
    ON images.stereo_extrinsics (t_id);
CREATE INDEX idx_stereos_extrinsics_r_id
    ON images.stereo_extrinsics (r_id);
CREATE INDEX idx_stereos_extrinsics_r_rodrigues_id
    ON images.stereo_extrinsics (r_rodrigues_id);

COMMENT ON TABLE images.stereo_extrinsics IS 'Table stereo extrinsics from camera';
COMMENT ON COLUMN images.stereo_extrinsics.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.stereo_extrinsics.t_id IS '@omit create,update
t id for stereo extrinsics';
COMMENT ON COLUMN images.stereo_extrinsics.r_id IS '@omit create,update
r id for stereo extrinsics';
COMMENT ON COLUMN images.stereo_extrinsics.r_rodrigues_id IS '@omit create,update
r rodrigues id for stereo extrinsics';

CREATE TABLE IF NOT EXISTS images.tractor_extrinsics_t(
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_tractor_extrinsics_t_id 
    ON images.tractor_extrinsics_t (id);

COMMENT ON TABLE images.tractor_extrinsics_t IS 'Table tractor extrinsics t from camera';
COMMENT ON COLUMN images.tractor_extrinsics_t.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.tractor_extrinsics_t.data IS '@omit create,update
data for tractor extrinsics t ';

CREATE TABLE IF NOT EXISTS images.tractor_extrinsics_r(
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_tractor_extrinsics_r_id 
    ON images.tractor_extrinsics_r (id);

COMMENT ON TABLE images.tractor_extrinsics_r IS 'Table tractor extrinsics r from camera';
COMMENT ON COLUMN images.tractor_extrinsics_r.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.tractor_extrinsics_r.data IS '@omit create,update
data for tractor extrinsics r';

CREATE TABLE IF NOT EXISTS images.tractor_extrinsics_r_rodrigues(
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_tractor_extrinsics_r_rodrigues_id 
    ON images.tractor_extrinsics_r_rodrigues (id);

COMMENT ON TABLE images.tractor_extrinsics_r_rodrigues IS 'Table tractor extrinsics r from camera';
COMMENT ON COLUMN images.tractor_extrinsics_r_rodrigues.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.tractor_extrinsics_r_rodrigues.data IS '@omit create,update
data for tractor extrinsics r rodrigues';

CREATE TABLE IF NOT EXISTS images.tractor_extrinsics (
    id BIGSERIAL,
    t_id BIGINT NOT NULL,
    r_id BIGINT NOT NULL,
    r_rodrigues_id BIGINT NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_tractor_extrinsics_t
        FOREIGN KEY(t_id)
        REFERENCES images.tractor_extrinsics_t(id),
    CONSTRAINT fk_tractor_extrinsics_r
        FOREIGN KEY(r_id)
        REFERENCES images.tractor_extrinsics_r(id),
    CONSTRAINT fk_tractor_extrinsics_r_rodrigues
        FOREIGN KEY(r_rodrigues_id)
        REFERENCES images.tractor_extrinsics_r_rodrigues(id)
);

CREATE INDEX idx_tractors_extrinsics_id 
    ON images.tractor_extrinsics (id);
CREATE INDEX idx_tractors_extrinsics_t_id 
    ON images.tractor_extrinsics (t_id);
CREATE INDEX idx_tractors_extrinsics_r_id
    ON images.tractor_extrinsics (r_id);
CREATE INDEX idx_tractors_extrinsics_r_rodrigues_id
    ON images.tractor_extrinsics (r_rodrigues_id);

COMMENT ON TABLE images.tractor_extrinsics IS 'Table tractor extrinsics from camera';
COMMENT ON COLUMN images.tractor_extrinsics.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.tractor_extrinsics.t_id IS '@omit create,update
t id for  tractor extrinsics';
COMMENT ON COLUMN images.tractor_extrinsics.r_id IS '@omit create,update
r id for  tractor extrinsics';
COMMENT ON COLUMN images.tractor_extrinsics.r_rodrigues_id IS '@omit create,update
r rodrigues id for  tractor extrinsics';

CREATE TABLE IF NOT EXISTS images.camera_meta_e (
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_camera_meta_e_id
    ON images.camera_meta_e (id);

COMMENT ON TABLE images.camera_meta_e IS 'Table camera meta e from camera';
COMMENT ON COLUMN images.camera_meta_e.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.camera_meta_e.data IS '@omit create,update
data for camera meta e';

CREATE TABLE IF NOT EXISTS images.camera_meta_f (
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_camera_meta_f_id
    ON images.camera_meta_f (id);

COMMENT ON TABLE images.camera_meta_f IS 'Table camera meta f from camera';
COMMENT ON COLUMN images.camera_meta_f.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.camera_meta_f.data IS '@omit create,update
data for camera meta f';

CREATE TABLE IF NOT EXISTS images.camera_meta_r1 (
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_camera_meta_r1_id
    ON images.camera_meta_r1 (id);

COMMENT ON TABLE images.camera_meta_r1 IS 'Table camera meta r1 from camera';
COMMENT ON COLUMN images.camera_meta_r1.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.camera_meta_r1.data IS '@omit create,update
data for camera meta r1';

CREATE TABLE IF NOT EXISTS images.camera_meta_r2 (
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_camera_meta_r2_id
    ON images.camera_meta_r2 (id);

COMMENT ON TABLE images.camera_meta_r2 IS 'Table camera meta r2 from camera';
COMMENT ON COLUMN images.camera_meta_r2.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.camera_meta_r2.data IS '@omit create,update
data for camera meta r2';

CREATE TABLE IF NOT EXISTS images.camera_meta_p1 (
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_camera_meta_p1_id
    ON images.camera_meta_p1 (id);

COMMENT ON TABLE images.camera_meta_p1 IS 'Table camera meta p1 from camera';
COMMENT ON COLUMN images.camera_meta_p1.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.camera_meta_p1.data IS '@omit create,update
data for camera meta p1';

CREATE TABLE IF NOT EXISTS images.camera_meta_p2 (
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_camera_meta_p2_id
    ON images.camera_meta_p2  (id);

COMMENT ON TABLE images.camera_meta_p2 IS 'Table camera meta p2 from camera';
COMMENT ON COLUMN images.camera_meta_p2.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.camera_meta_p2.data IS '@omit create,update
data for camera meta p2';

CREATE TABLE IF NOT EXISTS images.camera_meta_q (
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_camera_meta_q_id
    ON images.camera_meta_q (id);

COMMENT ON TABLE images.camera_meta_q IS 'Table camera meta q from camera';
COMMENT ON COLUMN images.camera_meta_q.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.camera_meta_q.data IS '@omit create,update
data for camera meta q';

CREATE TABLE IF NOT EXISTS images.camera_roi (
    id BIGSERIAL,
    x_offset DECIMAL NOT NULL,
    y_offset DECIMAL NOT NULL,
    height INT NOT NULL,
    width INT NOT NULL,
    do_rectify BOOLEAN NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_camera_roi_id
    ON images.camera_roi (id);

COMMENT ON TABLE images.camera_roi IS 'Table camera roi from camera';
COMMENT ON COLUMN images.camera_roi.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.camera_roi.x_offset IS '@omit create,update
x_offset for camera roi';
COMMENT ON COLUMN images.camera_roi.y_offset IS '@omit create,update
y_offset for camera roi';
COMMENT ON COLUMN images.camera_roi.height IS '@omit create,update
height for camera roi';
COMMENT ON COLUMN images.camera_roi.width IS '@omit create,update
width for camera roi';
COMMENT ON COLUMN images.camera_roi.do_rectify IS '@omit create,update
do_rectify for camera roi';

CREATE TABLE IF NOT EXISTS images.full_histogram (
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_full_histogram_id
    ON images.full_histogram (id);

COMMENT ON TABLE images.full_histogram IS 'Table full histogram from camera';
COMMENT ON COLUMN images.full_histogram.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.full_histogram.data IS '@omit create,update
data for full histogram';


CREATE TABLE IF NOT EXISTS images.small_histogram (
    id BIGSERIAL,
    data text NOT NULL,
    PRIMARY KEY(id)
);

CREATE INDEX idx_small_histogram_id
    ON images.small_histogram (id);

COMMENT ON TABLE images.small_histogram IS 'Table small histogram from camera';
COMMENT ON COLUMN images.small_histogram.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.small_histogram.data IS '@omit create,update
data for small histogram';


CREATE TABLE IF NOT EXISTS images.camera_histogram (
    id BIGSERIAL,
    full_histogram_id BIGINT NOT NULL,
    small_histogram_id BIGINT NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_full_hisogram
        FOREIGN KEY(full_histogram_id)
        REFERENCES images.full_histogram(id),
    CONSTRAINT fk_small_hisogram
        FOREIGN KEY(small_histogram_id)
        REFERENCES images.small_histogram(id)
);

CREATE INDEX idx_camera_histogram_id
    ON images.camera_histogram (id);
CREATE INDEX idx_camera_histogram_full_histogram_id
    ON images.camera_histogram (full_histogram_id);
CREATE INDEX idx_camera_histogram_small_histogram_id
    ON images.camera_histogram (small_histogram_id);

COMMENT ON TABLE images.camera_histogram IS 'Table small histogram from camera';
COMMENT ON COLUMN images.camera_histogram.id IS '@omit create,update
Id generated by database, auto incremented';
COMMENT ON COLUMN images.camera_histogram.full_histogram_id IS '@omit create,update
full histogram id for camera histogram';
COMMENT ON COLUMN images.camera_histogram.small_histogram_id IS '@omit create,update
small histogram id for camera histogram';

CREATE TABLE IF NOT EXISTS images.camera_meta (
    id BIGSERIAL,
    serial_number VARCHAR(255) NOT NULL,
    camera_name text,
    left_intrinsics_id BIGINT NOT NULL,
    right_intrinsics_id BIGINT NOT NULL,
    stereo_extrinsics_id BIGINT NOT NULL,
    tractor_extrinsics_id BIGINT NOT NULL,
    e_id BIGINT NOT NULL,
    f_id BIGINT NOT NULL,
    r1_id BIGINT NOT NULL,
    r2_id BIGINT NOT NULL,
    p1_id BIGINT NOT NULL,
    p2_id BIGINT NOT NULL,
    q_id BIGINT NOT NULL,
    left_roi_id BIGINT,
    right_roi_id BIGINT,
    left_exposure DECIMAL,
    right_exposure DECIMAL,
    left_gain DECIMAL,
    right_gain DECIMAL,
    extra text,
    left_histogram_id BIGINT NOT NULL,
    right_histogram_id BIGINT NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_left_intrinsics
        FOREIGN KEY(left_intrinsics_id)
        REFERENCES images.side_intrinsics(id),
    CONSTRAINT fk_right_intrinsics
        FOREIGN KEY(right_intrinsics_id)
        REFERENCES images.side_intrinsics(id),
    CONSTRAINT fk_stereo_extrinsics
        FOREIGN KEY(stereo_extrinsics_id)
        REFERENCES images.stereo_extrinsics(id),
    CONSTRAINT fk_tractor_extrinsics
        FOREIGN KEY(tractor_extrinsics_id)
        REFERENCES images.tractor_extrinsics(id),
    CONSTRAINT fk_e
        FOREIGN KEY(e_id)
        REFERENCES images.camera_meta_e(id),
    CONSTRAINT fk_f
        FOREIGN KEY(f_id)
        REFERENCES images.camera_meta_f(id),
    CONSTRAINT fk_r1
        FOREIGN KEY(r1_id)
        REFERENCES images.camera_meta_r1(id),
    CONSTRAINT fk_r2
        FOREIGN KEY(r2_id)
        REFERENCES images.camera_meta_r2(id),
    CONSTRAINT fk_p1
        FOREIGN KEY(p1_id)
        REFERENCES images.camera_meta_p1(id),
    CONSTRAINT fk_p2
        FOREIGN KEY(p2_id)
        REFERENCES images.camera_meta_p2(id),
    CONSTRAINT fk_q
        FOREIGN KEY(q_id)
        REFERENCES images.camera_meta_q(id),
    CONSTRAINT fk_left_roi
        FOREIGN KEY(left_roi_id)
        REFERENCES images.camera_roi(id),
    CONSTRAINT fk_right_roi
        FOREIGN KEY(right_roi_id)
        REFERENCES images.camera_roi(id),
    CONSTRAINT fk_left_historgram
        FOREIGN KEY(left_histogram_id)
        REFERENCES images.camera_histogram(id),
    CONSTRAINT fk_right_historgram
        FOREIGN KEY(right_histogram_id)
        REFERENCES images.camera_histogram(id)
);

CREATE INDEX idx_camera_meta_id
    ON images.camera_meta (id);

COMMENT ON TABLE images.camera_meta IS 'Table camera meta';
COMMENT ON COLUMN images.camera_meta.id IS '@omit create,update 
id auto-incremented by database';
COMMENT ON COLUMN images.camera_meta.serial_number IS '@omit create,update 
camera serial number';
COMMENT ON COLUMN images.camera_meta.camera_name IS '@omit create,update 
camera name';
COMMENT ON COLUMN images.camera_meta.left_intrinsics_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.right_intrinsics_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.stereo_extrinsics_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.tractor_extrinsics_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.e_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.f_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.r1_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.r2_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.p1_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.p2_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.q_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.left_roi_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.right_roi_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.left_exposure IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.right_exposure IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.left_gain IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.right_gain IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.extra IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.left_histogram_id IS '@omit create,update 
';
COMMENT ON COLUMN images.camera_meta.right_histogram_id IS '@omit create,update 
';

CREATE TABLE IF NOT EXISTS images.camera_pair_message (
    id BIGSERIAL,
    header_id BIGINT NOT NULL,
    left_image_id BIGINT NOT NULL,
    right_image_id BIGINT NOT NULL,
    camera_meta_id BIGINT NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_camera_pair_message_header
        FOREIGN KEY(header_id)
        REFERENCES images.camera_message_header(id),
    CONSTRAINT fk_camera_pair_left_image
        FOREIGN KEY(left_image_id)
        REFERENCES images.images(id),
    CONSTRAINT fk_camera_pair_right_image
        FOREIGN KEY(right_image_id)
        REFERENCES images.images(id),
    CONSTRAINT fk_camera_meta
        FOREIGN KEY(camera_meta_id)
        REFERENCES images.camera_meta(id)
);

CREATE INDEX idx_camera_pair_message_id
    ON images.camera_pair_message (id);
CREATE INDEX idx_camera_pair_message_header_id
    ON images.camera_pair_message (header_id);
CREATE INDEX idx_camera_pair_message_left_image_id
    ON images.camera_pair_message (left_image_id);
CREATE INDEX idx_camera_pair_message_right_image_id
    ON images.camera_pair_message (right_image_id);
CREATE INDEX idx_camera_pair_message_camera_meta_id
    ON images.camera_pair_message (camera_meta_id);

COMMENT ON TABLE images.camera_pair_message IS 'Table camera pair message';
COMMENT ON COLUMN images.camera_pair_message.id IS '@omit create,update 
id auto-incremented by database';
COMMENT ON COLUMN images.camera_pair_message.left_image_id IS '@omit create,update 
left image id for camera message pair';
COMMENT ON COLUMN images.camera_pair_message.right_image_id IS '@omit create,update 
right image id for camera message pair';
COMMENT ON COLUMN images.camera_pair_message.camera_meta_id IS '@omit create,update 
camera meta id for camera message pair';

CREATE TABLE IF NOT EXISTS images.camera_pair (
    id BIGSERIAL,
    readingAt TIMESTAMPTZ NOT NULL,
    topic_id BIGINT NOT NULL,
    msg_id BIGINT NOT NULL,
    topic_type_id BIGINT NOT NULL,
    vehicle_id BIGINT NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_camera_pair_topic
        FOREIGN KEY(topic_id)
        REFERENCES topics.topics(id),
    CONSTRAINT fk_camera_pair_msg 
        FOREIGN KEY(msg_id)
        REFERENCES images.camera_pair_message(id),
    CONSTRAINT fk_topics_type
        FOREIGN KEY(topic_type_id)
        REFERENCES topics.topic_types(id),
    CONSTRAINT fk_vehicle_id
        FOREIGN KEY(vehicle_id)
        REFERENCES vehicles.vehicles(id);

CREATE INDEX idx_camera_pair_id
    ON images.camera_pair  (id);
CREATE INDEX idx_camera_pair_topic_id
    ON images.camera_pair  (topic_id);
CREATE INDEX idx_camera_pair_msg_id
    ON images.camera_pair  (msg_id);
CREATE INDEX idx_camera_pair_topic_type_id
    ON images.camera_pair  (topic_type_id);
CREATE INDEX idx_camera_pair_vehicle_id
    ON images.camera_pair  (vehicle_id);

COMMENT ON TABLE images.camera_pair IS 'Table camera pair message';
COMMENT ON COLUMN images.camera_pair.id IS '@omit create,update 
id auto-incremented by database';
COMMENT ON COLUMN images.camera_pair.readingAt IS '@omit create,update 
timestamp for camera pair';
COMMENT ON COLUMN images.camera_pair.topic_id IS '@omit create,update 
topic for camera pair';
COMMENT ON COLUMN images.camera_pair.msg_id IS '@omit create,update 
message for camera pair';
COMMENT ON COLUMN images.camera_pair.topic_type_id IS '@omit create,update 
topic type for camera pair';
COMMENT ON COLUMN images.camera_pair.vehicle_id IS '@omit create,update 
vehicle associated with the camera pair';

CREATE TABLE IF NOT EXISTS images.camera_message (
    id BIGSERIAL,
    header_id BIGINT NOT NULL,
    image_id BIGINT NOT NULL,
    camera_meta_id BIGINT NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_camera_message_header
        FOREIGN KEY(header_id)
        REFERENCES images.camera_message_header(id),
    CONSTRAINT fk_camera_image
        FOREIGN KEY(image_id)
        REFERENCES images.images(id),
    CONSTRAINT fk_camera_meta
        FOREIGN KEY(camera_meta_id)
        REFERENCES images.camera_meta(id)
);

CREATE INDEX idx_camera_message_id
    ON images.camera_message  (id);
CREATE INDEX idx_camera_message_header_id
    ON images.camera_message  (header_id);
CREATE INDEX idx_camera_message_image_id
    ON images.camera_message  (image_id);
CREATE INDEX idx_camera_message_camera_meta_id
    ON images.camera_message  (camera_meta_id);

COMMENT ON TABLE images.camera_message IS 'Table camera message';
COMMENT ON COLUMN images.camera_message.id IS '@omit create,update 
id auto-incremented by database';
COMMENT ON COLUMN images.camera_message.header_id IS '@omit create,update 
header id camera message';
COMMENT ON COLUMN images.camera_message.image_id IS '@omit create,update 
image id camera message';
COMMENT ON COLUMN images.camera_message.camera_meta_id IS '@omit create,update 
camera meta id camera message';

CREATE TABLE IF NOT EXISTS images.camera (
    id BIGSERIAL,
    readingAt TIMESTAMPTZ NOT NULL,
    topic_id BIGINT NOT NULL,
    msg_id BIGINT NOT NULL,
    vehicle_id BIGINT NOT NULL,
    camera_json_id BIGINT NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_camera_topic
        FOREIGN KEY(topic_id)
        REFERENCES topics.topics(id),
    CONSTRAINT fk_camera_msg 
        FOREIGN KEY(msg_id)
        REFERENCES images.camera_message(id),
    CONSTRAINT fk_vehicle_id
        FOREIGN KEY(vehicle_id)
        REFERENCES vehicles.vehicles(id),
    CONSTRAINT fk_camera_json
        FOREIGN KEY(camera_json_id)
        REFERENCES images.camera_json(id)
);

CREATE INDEX idx_camera_id
    ON images.camera  (id);
CREATE INDEX idx_camera_topic_id
    ON images.camera  (topic_id);
CREATE INDEX idx_camera_msg_id
    ON images.camera  (msg_id);
CREATE INDEX idx_camera_vehicle_id
    ON images.camera  (vehicle_id);
CREATE INDEX idx_camera_json_json_id
    ON images.camera  (camera_json_id);

COMMENT ON TABLE images.camera IS 'Table camera';
COMMENT ON COLUMN images.camera.id IS '@omit create,update 
id auto-incremented by database';
COMMENT ON COLUMN images.camera.readingAt IS '@omit create,update 
timestamp for camera';
COMMENT ON COLUMN images.camera.topic_id IS '@omit create,update 
topic for camera';
COMMENT ON COLUMN images.camera.msg_id IS '@omit create,update 
message id for camera';
COMMENT ON COLUMN images.camera.vehicle_id IS '@omit create,update 
vehicle id for camera';
COMMENT ON COLUMN images.camera.camera_json_id IS '@omit create,update 
json id for camera';

-- SEGMENTATION
CREATE TABLE IF NOT EXISTS images.segmentation_map
(
    id BIGSERIAL,
    readingat timestamp with time zone NOT NULL,
    topic_id bigint NOT NULL,
    msg_id bigint NOT NULL,
    vehicle_id bigint NOT NULL,
    camera_json_id BIGINT NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT fk_camera_msg FOREIGN KEY (msg_id)
        REFERENCES images.camera_message (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_camera_topic FOREIGN KEY (topic_id)
        REFERENCES topics.topics (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_vehicle_id FOREIGN KEY (vehicle_id)
        REFERENCES vehicles.vehicles (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
    CONSTRAINT fk_camera_json
        FOREIGN KEY(camera_json_id)
        REFERENCES images.camera_json(id)
);

CREATE INDEX idx_segmentation_map_id
    ON images.segmentation_map  (id);
CREATE INDEX idx_segmentation_topic_id
    ON images.segmentation_map  (topic_id);
CREATE INDEX idx_segmentation_vehicle_id
    ON images.segmentation_map  (vehicle_id);
CREATE INDEX idx_segmentation_map_json_json_id
    ON images.segmentation_map  (camera_json_id);

COMMENT ON TABLE images.segmentation_map IS 'Table segmentation map';
COMMENT ON COLUMN images.segmentation_map.id IS '@omit create,update 
id auto-incremented by database';
COMMENT ON COLUMN images.segmentation_map.readingat IS '@omit create,update 
timestamp of segementation map';
COMMENT ON COLUMN images.segmentation_map.topic_id IS '@omit create,update 
topic of segementation map';
COMMENT ON COLUMN images.segmentation_map.msg_id IS '@omit create,update 
message of segementation map';
COMMENT ON COLUMN images.segmentation_map.vehicle_id IS '@omit create,update 
vehicle of segementation map';
COMMENT ON COLUMN images.segmentation_map.camera_json_id IS '@omit create,update 
json id for camera';

CREATE OR REPLACE FUNCTION  images.insert_camera_image(
	json_text json
	, descriptor_timestamp timestamp
	, header_timestamp timestamp 
	, topic_id bigint
    , vehicle_id bigint
    , image_data text
)
    RETURNS INTEGER
    AS $$
BEGIN
WITH ins_camera_json as (
            INSERT INTO images.camera_json(json)
            VALUES(json_text)

            RETURNING *
        ),
        ins_left_intrinsics_k as (
            INSERT INTO images.side_intrinsics_k (data)
            (SELECT 
                json->'msg'->'camera_meta'->'left_intrinsics'->>'k' as data
            FROM ins_camera_json)

            RETURNING id
        ),
        ins_right_intrinsics_k as (
             INSERT INTO images.side_intrinsics_k (data)
             (SELECT 
                json->'msg'->'camera_meta'->'right_intrinsics'->>'k' as data
            FROM ins_camera_json)
 
             RETURNING id
         ),
         ins_left_intrinsics_d as (
             INSERT INTO images.side_intrinsics_d (data)
             (SELECT 
                json->'msg'->'camera_meta'->'left_intrinsics'->>'d' as data
            FROM ins_camera_json)

             RETURNING id
         ),
         ins_right_intrinsics_d as (
              INSERT INTO images.side_intrinsics_d (data)
             (SELECT 
                json->'msg'->'camera_meta'->'right_intrinsics'->>'d' as data
            FROM ins_camera_json)

              RETURNING id
        ),
        ins_left_intrinsics as (
            INSERT INTO images.side_intrinsics (height, width, k_id, d_id)
             (SELECT 
                CAST(json->'msg'->'camera_meta'->'left_intrinsics'->>'height' as INTEGER) as height
                , CAST(json->'msg'->'camera_meta'->'left_intrinsics'->>'width' as INTEGER) as width
                , (select id from ins_left_intrinsics_k)
                , (select id from ins_left_intrinsics_d)
            FROM ins_camera_json)

            RETURNING id
        ),
        ins_right_intrinsics as (
            INSERT INTO images.side_intrinsics (height, width, k_id, d_id)
             (SELECT 
                CAST(json->'msg'->'camera_meta'->'right_intrinsics'->>'height' as INTEGER) as height
                , CAST(json->'msg'->'camera_meta'->'right_intrinsics'->>'width' as INTEGER) as width
                , (select id from ins_right_intrinsics_k)
                , (select id from ins_right_intrinsics_d)
            FROM ins_camera_json)

            RETURNING id
        ),
        ins_stereo_extrinsics_t as (
            INSERT INTO images.stereo_extrinsics_t (data) 
            (SELECT 
                json->'msg'->'camera_meta'->'stereo_extrinsics'->>'t' as data
            FROM ins_camera_json)

            RETURNING id
        ),
        ins_stereo_extrinsics_r as (
             INSERT INTO images.stereo_extrinsics_r (data) 
             (SELECT 
                json->'msg'->'camera_meta'->'stereo_extrinsics'->>'r' as data
            FROM ins_camera_json)

             RETURNING id
         ),
         ins_stereo_extrinsics_r_rodrigues as (
             INSERT INTO images.stereo_extrinsics_r_rodrigues (data) 
             (SELECT 
                json->'msg'->'camera_meta'->'stereo_extrinsics'->>'r_rodrigues' as data
            FROM ins_camera_json)

             RETURNING id
         ),
         ins_stereo_extrinsics as (
             INSERT INTO images.stereo_extrinsics (t_id, r_id, r_rodrigues_id) 
             VALUES(
                 (select id from ins_stereo_extrinsics_t)
                 , (select id from ins_stereo_extrinsics_r)
                 , (select id from ins_stereo_extrinsics_r_rodrigues)
             )

             RETURNING id
         ),
         ins_tractor_extrinsics_t as (
             INSERT INTO images.tractor_extrinsics_t (data) 
             (SELECT 
                json->'msg'->'camera_meta'->'tractor_extrinsics'->>'t' as data
            FROM ins_camera_json)
         
             RETURNING id
         ),
         ins_tractor_extrinsics_r as (
              INSERT INTO images.tractor_extrinsics_r (data) 
              (SELECT 
                json->'msg'->'camera_meta'->'tractor_extrinsics'->>'r' as data
             FROM ins_camera_json)
         
              RETURNING id
          ),
          ins_tractor_extrinsics_r_rodrigues as (
              INSERT INTO images.tractor_extrinsics_r_rodrigues (data) 
              (SELECT 
                json->'msg'->'camera_meta'->'tractor_extrinsics'->>'r_rodrigues' as data
             FROM ins_camera_json)
         
              RETURNING id
          ),
          ins_tractor_extrinsics as (
              INSERT INTO images.tractor_extrinsics (t_id, r_id, r_rodrigues_id) 
              VALUES(
                  (select id from ins_tractor_extrinsics_t)
                  , (select id from ins_tractor_extrinsics_r)
                  , (select id from ins_tractor_extrinsics_r_rodrigues)
                 )
         
              RETURNING id
          ),
          ins_left_roi as (
             INSERT INTO images.camera_roi 
             (x_offset, y_offset, height, width, do_rectify) 
             (SELECT 
                CAST(json->'msg'->'camera_meta'->'left_roi'->>'x_offset' as INTEGER) as x_offset
                , CAST(json->'msg'->'camera_meta'->'left_roi'->>'y_offset' as INTEGER) as y_offset
                , CAST(json->'msg'->'camera_meta'->'left_roi'->>'height' as INTEGER) as height
                , CAST(json->'msg'->'camera_meta'->'left_roi'->>'width' as INTEGER) as width
                , CAST( json->'msg'->'camera_meta'->'left_roi'->>'do_rectify' as BOOLEAN) as do_rectify
             FROM ins_camera_json)
        
             RETURNING id
         ),
         ins_right_roi as (
             INSERT INTO images.camera_roi 
             (x_offset, y_offset, height, width, do_rectify) 
             (SELECT 
                CAST( json->'msg'->'camera_meta'->'right_roi'->>'x_offset' as INTEGER)  as x_offset
                , CAST( json->'msg'->'camera_meta'->'right_roi'->>'y_offset' as INTEGER)  as y_offset
                , CAST( json->'msg'->'camera_meta'->'right_roi'->>'height' as INTEGER)  as height
                , CAST( json->'msg'->'camera_meta'->'right_roi'->>'width' as INTEGER)  as width
                , CAST( json->'msg'->'camera_meta'->'right_roi'->>'do_rectify' as BOOLEAN) as do_rectify
             FROM ins_camera_json)

             RETURNING id
         ),
         ins_left_histogram_full_histogram as (
             INSERT INTO images.full_histogram (data)
             (SELECT 
                json->'msg'->'camera_meta'->'left_histogram'->>'full_histogram' as data
             FROM ins_camera_json)

             RETURNING id
         ),
         ins_left_histogram_small_histogram as (
             INSERT INTO images.small_histogram (data)
             (SELECT 
                json->'msg'->'camera_meta'->'left_histogram'->>'small_histogram' as data
             FROM ins_camera_json)

             RETURNING id
         ),
         ins_left_histogram as (
             INSERT INTO images.camera_histogram (full_histogram_id, small_histogram_id)
             VALUES (
                 (select id from ins_left_histogram_full_histogram)
                 , (select id from ins_left_histogram_small_histogram)
             )
             
             RETURNING id
         ),
         ins_right_histogram_full_histogram as (
             INSERT INTO images.full_histogram (data)
             (SELECT 
                json->'msg'->'camera_meta'->'right_histogram'->>'full_histogram' as data
             FROM ins_camera_json)
         
             RETURNING id
         ),
         ins_right_histogram_small_histogram as (
             INSERT INTO images.small_histogram (data)
             (SELECT 
                json->'msg'->'camera_meta'->'right_histogram'->>'small_histogram' as data
             FROM ins_camera_json)
             
             RETURNING id
         ),
         ins_right_histogram as (
             INSERT INTO images.camera_histogram (full_histogram_id, small_histogram_id)
             VALUES (
                 (select id from ins_right_histogram_full_histogram)
                 , (select id from ins_right_histogram_small_histogram)
             )
             
             RETURNING id
         ),
         ins_e as (
             INSERT INTO images.camera_meta_e (data)
             (SELECT 
                json->'msg'->'camera_meta'->>'e' as data
             FROM ins_camera_json)

             RETURNING id
         ),
         ins_f as (
             INSERT INTO images.camera_meta_f (data)
             (SELECT 
                json->'msg'->'camera_meta'->>'f' as data
             FROM ins_camera_json)

             RETURNING id
         ),
         ins_r1 as (
             INSERT INTO images.camera_meta_r1 (data)
             (SELECT 
                json->'msg'->'camera_meta'->>'r1' as data
             FROM ins_camera_json)

             RETURNING id
         ),
         ins_r2 as (
             INSERT INTO images.camera_meta_r2 (data)
             (SELECT 
                json->'msg'->'camera_meta'->>'r2' as data
             FROM ins_camera_json)

             RETURNING id
         ),
         ins_p1 as (
             INSERT INTO images.camera_meta_p1 (data)
             (SELECT 
                json->'msg'->'camera_meta'->>'p1' as data
             FROM ins_camera_json)

             RETURNING id
         ),
         ins_p2 as (
             INSERT INTO images.camera_meta_p2 (data)
             (SELECT 
                json->'msg'->'camera_meta'->>'p2' as data
             FROM ins_camera_json)

             RETURNING id
         ),
         ins_q as (
             INSERT INTO images.camera_meta_q (data)
             (SELECT 
                json->'msg'->'camera_meta'->>'q' as data
             FROM ins_camera_json)

             RETURNING id
         ),

         ins_camera_meta as (
            INSERT INTO images.camera_meta (
                serial_number
                , camera_name
                , left_intrinsics_id
                , right_intrinsics_id
                , stereo_extrinsics_id
                , tractor_extrinsics_id
                , e_id
                , f_id
                , r1_id
                , r2_id
                , p1_id
                , p2_id
                , q_id
                , left_roi_id
                , right_roi_id
                , left_exposure
                , right_exposure
                , left_gain
                , right_gain
                , extra
                , left_histogram_id
                , right_histogram_id
            )VALUES (
                (SELECT  json->'msg'->'camera_meta'->>'serial_number' as serial_number FROM ins_camera_json)
                , (SELECT  json->'msg'->'camera_meta'->>'camera_name' as camera_name FROM ins_camera_json)
                , (select id from ins_left_intrinsics)
                , (select id from ins_right_intrinsics)
                , (select id from ins_stereo_extrinsics)
                , (select id from ins_tractor_extrinsics)
                , (select id from ins_e )
                , (select id from ins_f)
                , (select id from ins_r1)
                , (select id from ins_r2)
                , (select id from ins_p1)
                , (select id from ins_p2)
                , (select id from ins_q)
                , (select id from ins_left_roi)
                , (select id from ins_right_roi)
                , (SELECT  CAST( json->'msg'->'camera_meta'->>'left_exposure' as DECIMAL) as left_exposure FROM ins_camera_json)
                , (SELECT  CAST(json->'msg'->'camera_meta'->>'right_exposure' as DECIMAL) as right_exposure FROM ins_camera_json)
                , (SELECT  CAST(json->'msg'->'camera_meta'->>'left_gain' as DECIMAL)  as left_gain FROM ins_camera_json)
                , (SELECT  CAST(json->'msg'->'camera_meta'->>'right_gain' as DECIMAL)  as right_gain FROM ins_camera_json)
                , (SELECT  json->'msg'->'camera_meta'->>'extra' as extra FROM ins_camera_json)
                , (select id from ins_left_histogram)
                , (select id from ins_right_histogram)
            )
   
            RETURNING id
         ),

         ins_camera_message_header as (
            INSERT INTO images.camera_message_header
            (header_id, readingAt, seq, node)
            (SELECT  
                CAST(json->'msg'->'descriptor'->>'id' as BIGINT) as header_id
                , descriptor_timestamp as readingAt
                , CAST( json->'msg'->'descriptor'->>'seq' as INTEGER) as seq 
                , json->'msg'->'descriptor'->>'node' as node 
            FROM ins_camera_json)

            RETURNING id
         ),

         ins_image_header_stamp as (
            INSERT INTO images.image_header_stamp
            (sec, nanosec)
            (SELECT  
                CAST( json->'msg'->'image'->'header'->'stamp'->>'sec' as INTEGER) as sec 
                , CAST(json->'msg'->'image'->'header'->'stamp'->>'nanosec' as INTEGER) as nanosec 
            FROM ins_camera_json)

            RETURNING id
        ),

        ins_image_header as (
            INSERT INTO images.image_header
            (stamp_id, frame_id)
            VALUES(
                (select id from ins_image_header_stamp)
                , (SELECT  
                        json->'msg'->'image'->'header'->>'frame_id' as frame_id 
                    FROM ins_camera_json)
                )

            RETURNING id
        ),

        ins_image_data as (
            INSERT INTO images.image_data (data) 
            VALUES (image_data)

            RETURNING id
        ),

        ins_images as (
            INSERT INTO images.images
            (
                header_id
                , height
                , width
                , encoding
                , is_bigendian
                , step
                , data_id
            )
            VALUES (
               (select id from ins_image_header)
               , (SELECT CAST( json->'msg'->'image'->>'height' as INTEGER) as height FROM ins_camera_json)
               , (SELECT CAST(json->'msg'->'image'->>'width' as INTEGER) as width FROM ins_camera_json)
               , (SELECT json->'msg'->'image'->>'encoding' as encoding FROM ins_camera_json)
               , (SELECT CAST( json->'msg'->'image'->>'is_bigendian' as INTEGER)  as is_bigendian FROM ins_camera_json)
               , (SELECT CAST(json->'msg'->'image'->>'step' as INTEGER)  as step FROM ins_camera_json)
               , (select id from ins_image_data)
               )
   
           RETURNING id
        ),
         
        ins_camera_message as (
            INSERT INTO images.camera_message
            (header_id, image_id, camera_meta_id)
            VALUES(
                (select id from ins_camera_message_header)
                , (select id from ins_images)
                , (select id from ins_camera_meta)
            )

            RETURNING id
        )

        INSERT INTO images.camera 
            (readingAt, topic_id, vehicle_id, msg_id, camera_json_id)
        VALUES(
            header_timestamp
            , topic_id
            , vehicle_id
            , (select id from ins_camera_message)
            , (SELECT id FROM ins_camera_json)
        );
		
	RETURN 1;
	
EXCEPTION
	   WHEN SQLSTATE '23000' THEN
		  	   raise notice 'The transaction is in an uncommittable state. '
                 'Transaction was rolled back';

   				 raise notice '% %', SQLERRM, SQLSTATE;
		WHEN others THEN
			   raise notice 'The transaction is in an uncommittable state. '
                 'Transaction was rolled back';

    			raise notice '% %', SQLERRM, SQLSTATE;
END
$$
LANGUAGE plpgsql;

-- 
CREATE OR REPLACE FUNCTION  images.select_image_by_id(_image_id bigint)
	RETURNS TABLE (
			 data text, 
            is_bigendian int,
            encoding varchar(255),
            height int,
            width int,
            step bigint)
  LANGUAGE plpgsql AS
$$
BEGIN
   RETURN QUERY
   SELECT 
            img_data.data as data, 
            imgs.is_bigendian as is_bigendian,
            imgs.encoding as encoding,
            imgs.height as height,
            imgs.width as width,
            imgs.step as step
        FROM images.images as imgs
        INNER JOIN images.image_data  as img_data ON  imgs.data_id = img_data.id
        WHERE imgs.id = _image_id;
END;
$$;